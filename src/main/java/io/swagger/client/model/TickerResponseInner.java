/*
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * TickerResponseInner
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-06-14T16:16:45.442340731Z[GMT]")

public class TickerResponseInner {
  @SerializedName("lastUpdated")
  private LocalDate lastUpdated = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("percentChange24hUsd")
  private Float percentChange24hUsd = null;

  @SerializedName("priceBtc")
  private Float priceBtc = null;

  @SerializedName("priceUsd")
  private Float priceUsd = null;

  @SerializedName("symbol")
  private String symbol = null;

  public TickerResponseInner lastUpdated(LocalDate lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Closing price quote of the time frame with two decimal points
   * @return lastUpdated
  **/
  @Schema(description = "Closing price quote of the time frame with two decimal points")
  public LocalDate getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(LocalDate lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public TickerResponseInner name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Highest price of the time frame with two decimal points
   * @return name
  **/
  @Schema(example = "Ethereum", description = "Highest price of the time frame with two decimal points")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public TickerResponseInner percentChange24hUsd(Float percentChange24hUsd) {
    this.percentChange24hUsd = percentChange24hUsd;
    return this;
  }

   /**
   * Percetange change in the last 24 hours
   * @return percentChange24hUsd
  **/
  @Schema(example = "0.730086313989841", description = "Percetange change in the last 24 hours")
  public Float getPercentChange24hUsd() {
    return percentChange24hUsd;
  }

  public void setPercentChange24hUsd(Float percentChange24hUsd) {
    this.percentChange24hUsd = percentChange24hUsd;
  }

  public TickerResponseInner priceBtc(Float priceBtc) {
    this.priceBtc = priceBtc;
    return this;
  }

   /**
   * Opening price quote of the time frame with two decimal points
   * @return priceBtc
  **/
  @Schema(example = "0.0202135", description = "Opening price quote of the time frame with two decimal points")
  public Float getPriceBtc() {
    return priceBtc;
  }

  public void setPriceBtc(Float priceBtc) {
    this.priceBtc = priceBtc;
  }

  public TickerResponseInner priceUsd(Float priceUsd) {
    this.priceUsd = priceUsd;
    return this;
  }

   /**
   * Timestamp of the beggining of the frame
   * @return priceUsd
  **/
  @Schema(example = "148.2550050312261", description = "Timestamp of the beggining of the frame")
  public Float getPriceUsd() {
    return priceUsd;
  }

  public void setPriceUsd(Float priceUsd) {
    this.priceUsd = priceUsd;
  }

  public TickerResponseInner symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Volume of currency exchanged in the time frame with two decimal points
   * @return symbol
  **/
  @Schema(example = "ETH", description = "Volume of currency exchanged in the time frame with two decimal points")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TickerResponseInner tickerResponseInner = (TickerResponseInner) o;
    return Objects.equals(this.lastUpdated, tickerResponseInner.lastUpdated) &&
        Objects.equals(this.name, tickerResponseInner.name) &&
        Objects.equals(this.percentChange24hUsd, tickerResponseInner.percentChange24hUsd) &&
        Objects.equals(this.priceBtc, tickerResponseInner.priceBtc) &&
        Objects.equals(this.priceUsd, tickerResponseInner.priceUsd) &&
        Objects.equals(this.symbol, tickerResponseInner.symbol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastUpdated, name, percentChange24hUsd, priceBtc, priceUsd, symbol);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TickerResponseInner {\n");
    
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentChange24hUsd: ").append(toIndentedString(percentChange24hUsd)).append("\n");
    sb.append("    priceBtc: ").append(toIndentedString(priceBtc)).append("\n");
    sb.append("    priceUsd: ").append(toIndentedString(priceUsd)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
