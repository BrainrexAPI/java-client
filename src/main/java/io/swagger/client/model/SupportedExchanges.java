/*
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * SupportedExchanges
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-06-14T16:16:45.442340731Z[GMT]")

public class SupportedExchanges {
  @SerializedName("bestCaseFee")
  private BigDecimal bestCaseFee = null;

  @SerializedName("worstCaseFee")
  private BigDecimal worstCaseFee = null;

  @SerializedName("exchange")
  private String exchange = null;

  public SupportedExchanges bestCaseFee(BigDecimal bestCaseFee) {
    this.bestCaseFee = bestCaseFee;
    return this;
  }

   /**
   * Best fee scenario offered by the market
   * @return bestCaseFee
  **/
  @Schema(example = "2", description = "Best fee scenario offered by the market")
  public BigDecimal getBestCaseFee() {
    return bestCaseFee;
  }

  public void setBestCaseFee(BigDecimal bestCaseFee) {
    this.bestCaseFee = bestCaseFee;
  }

  public SupportedExchanges worstCaseFee(BigDecimal worstCaseFee) {
    this.worstCaseFee = worstCaseFee;
    return this;
  }

   /**
   * Limit depth to extract from the orderbook
   * @return worstCaseFee
  **/
  @Schema(example = "2", description = "Limit depth to extract from the orderbook")
  public BigDecimal getWorstCaseFee() {
    return worstCaseFee;
  }

  public void setWorstCaseFee(BigDecimal worstCaseFee) {
    this.worstCaseFee = worstCaseFee;
  }

  public SupportedExchanges exchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

   /**
   * Name of the data format availables (standard)
   * @return exchange
  **/
  @Schema(example = "USD", description = "Name of the data format availables (standard)")
  public String getExchange() {
    return exchange;
  }

  public void setExchange(String exchange) {
    this.exchange = exchange;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportedExchanges supportedExchanges = (SupportedExchanges) o;
    return Objects.equals(this.bestCaseFee, supportedExchanges.bestCaseFee) &&
        Objects.equals(this.worstCaseFee, supportedExchanges.worstCaseFee) &&
        Objects.equals(this.exchange, supportedExchanges.exchange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestCaseFee, worstCaseFee, exchange);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportedExchanges {\n");
    
    sb.append("    bestCaseFee: ").append(toIndentedString(bestCaseFee)).append("\n");
    sb.append("    worstCaseFee: ").append(toIndentedString(worstCaseFee)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
