/*
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.LocalDate;
/**
 * OHCLV
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-06-14T16:16:45.442340731Z[GMT]")

public class OHCLV {
  @SerializedName("close")
  private Float close = null;

  @SerializedName("high")
  private Float high = null;

  @SerializedName("end_date")
  private LocalDate endDate = null;

  @SerializedName("open")
  private Float open = null;

  @SerializedName("time")
  private LocalDate time = null;

  @SerializedName("volume")
  private Float volume = null;

  @SerializedName("usdVolume")
  private Float usdVolume = null;

  @SerializedName("btcVolume")
  private Float btcVolume = null;

  @SerializedName("quoteVolume")
  private Float quoteVolume = null;

  public OHCLV close(Float close) {
    this.close = close;
    return this;
  }

   /**
   * Closing price quote of the time frame with two decimal points
   * @return close
  **/
  @Schema(example = "8612.83", description = "Closing price quote of the time frame with two decimal points")
  public Float getClose() {
    return close;
  }

  public void setClose(Float close) {
    this.close = close;
  }

  public OHCLV high(Float high) {
    this.high = high;
    return this;
  }

   /**
   * Highest price of the time frame with two decimal points
   * @return high
  **/
  @Schema(example = "8627.58", description = "Highest price of the time frame with two decimal points")
  public Float getHigh() {
    return high;
  }

  public void setHigh(Float high) {
    this.high = high;
  }

  public OHCLV endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End date in YYYY/MM/DD
   * @return endDate
  **/
  @Schema(description = "End date in YYYY/MM/DD")
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }

  public OHCLV open(Float open) {
    this.open = open;
    return this;
  }

   /**
   * Opening price quote of the time frame with two decimal points
   * @return open
  **/
  @Schema(example = "8148.72", description = "Opening price quote of the time frame with two decimal points")
  public Float getOpen() {
    return open;
  }

  public void setOpen(Float open) {
    this.open = open;
  }

  public OHCLV time(LocalDate time) {
    this.time = time;
    return this;
  }

   /**
   * Timestamp of the beggining of the frame
   * @return time
  **/
  @Schema(description = "Timestamp of the beggining of the frame")
  public LocalDate getTime() {
    return time;
  }

  public void setTime(LocalDate time) {
    this.time = time;
  }

  public OHCLV volume(Float volume) {
    this.volume = volume;
    return this;
  }

   /**
   * Volume of currency exchanged in the time frame with two decimal points
   * @return volume
  **/
  @Schema(example = "231.32", description = "Volume of currency exchanged in the time frame with two decimal points")
  public Float getVolume() {
    return volume;
  }

  public void setVolume(Float volume) {
    this.volume = volume;
  }

  public OHCLV usdVolume(Float usdVolume) {
    this.usdVolume = usdVolume;
    return this;
  }

   /**
   * Volume of currency exchanged in dollars the time frame with two decimal points
   * @return usdVolume
  **/
  @Schema(example = "1379412.833069846", description = "Volume of currency exchanged in dollars the time frame with two decimal points")
  public Float getUsdVolume() {
    return usdVolume;
  }

  public void setUsdVolume(Float usdVolume) {
    this.usdVolume = usdVolume;
  }

  public OHCLV btcVolume(Float btcVolume) {
    this.btcVolume = btcVolume;
    return this;
  }

   /**
   * Volume of currency exchanged in dollars the time frame with two decimal points
   * @return btcVolume
  **/
  @Schema(example = "160.1567232566732", description = "Volume of currency exchanged in dollars the time frame with two decimal points")
  public Float getBtcVolume() {
    return btcVolume;
  }

  public void setBtcVolume(Float btcVolume) {
    this.btcVolume = btcVolume;
  }

  public OHCLV quoteVolume(Float quoteVolume) {
    this.quoteVolume = quoteVolume;
    return this;
  }

   /**
   * Volume of currency exchanged in dollars the time frame with two decimal points
   * @return quoteVolume
  **/
  @Schema(example = "1379412.833069846", description = "Volume of currency exchanged in dollars the time frame with two decimal points")
  public Float getQuoteVolume() {
    return quoteVolume;
  }

  public void setQuoteVolume(Float quoteVolume) {
    this.quoteVolume = quoteVolume;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OHCLV OHCLV = (OHCLV) o;
    return Objects.equals(this.close, OHCLV.close) &&
        Objects.equals(this.high, OHCLV.high) &&
        Objects.equals(this.endDate, OHCLV.endDate) &&
        Objects.equals(this.open, OHCLV.open) &&
        Objects.equals(this.time, OHCLV.time) &&
        Objects.equals(this.volume, OHCLV.volume) &&
        Objects.equals(this.usdVolume, OHCLV.usdVolume) &&
        Objects.equals(this.btcVolume, OHCLV.btcVolume) &&
        Objects.equals(this.quoteVolume, OHCLV.quoteVolume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(close, high, endDate, open, time, volume, usdVolume, btcVolume, quoteVolume);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OHCLV {\n");
    
    sb.append("    close: ").append(toIndentedString(close)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    usdVolume: ").append(toIndentedString(usdVolume)).append("\n");
    sb.append("    btcVolume: ").append(toIndentedString(btcVolume)).append("\n");
    sb.append("    quoteVolume: ").append(toIndentedString(quoteVolume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
