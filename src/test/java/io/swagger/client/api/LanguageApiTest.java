/*
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Text;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for LanguageApi
 */
@Ignore
public class LanguageApiTest {

    private final LanguageApi api = new LanguageApi();

    /**
     * Extracts known crypto entities like coin names, exchanges, media from text.
     *
     * The Crypto Entities endpoint ingests written MIT Digital Currency Initiative Paper A paper describing how our sentiment and entity analyzer are built. And how the can be used for trading several cryptocurrencies successfully  We prove that using sentiment only as a input to a trading algorithm can be profitable. If combined with other machine learning models. We descri This Paper could be published in MIT Crypto Economics Journal . . &lt;br&gt;&lt;br&gt; Our AI selects from several models, choosing the one that fits the given data best, and we give you the avality to customize the sensitivy of the model. Our model has been trained to recognize anomalies in popular blockchain networks e.g. Bitcoin, Ethereum, learning from past events.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void languageGetCryptoEntitiesTest() throws Exception {
        Text body = null;
        api.languageGetCryptoEntities(body);

        // TODO: test validations
    }
    /**
     * Returns a -1 to 1 score, depending on positive/negative sentiment
     *
     * This endpoints returns a score from -1 to +1 where depending on negative or positive attitude in the text.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void languageGetGeneralSentimentTest() throws Exception {
        Text body = null;
        String response = api.languageGetGeneralSentiment(body);

        // TODO: test validations
    }
    /**
     * Sentiment analysis score using a model trained for buy signals.
     *
     * Gives a 0 to 1 score, depending on buy/sell sentiment
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void languageGetPriceSentimentTest() throws Exception {
        Text body = null;
        String response = api.languageGetPriceSentiment(body);

        // TODO: test validations
    }
}
